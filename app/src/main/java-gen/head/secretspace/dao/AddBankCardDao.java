package head.secretspace.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import head.secretspace.entity.AddBankCard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADD_BANK_CARD".
*/
public class AddBankCardDao extends AbstractDao<AddBankCard, Long> {

    public static final String TABLENAME = "ADD_BANK_CARD";

    /**
     * Properties of entity AddBankCard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BankAccount = new Property(1, String.class, "bankAccount", false, "BANK_ACCOUNT");
        public final static Property CardholderName = new Property(2, String.class, "cardholderName", false, "CARDHOLDER_NAME");
        public final static Property TelPhoneNum = new Property(3, String.class, "telPhoneNum", false, "TEL_PHONE_NUM");
        public final static Property IssuingBank = new Property(4, String.class, "issuingBank", false, "ISSUING_BANK");
        public final static Property Remarks = new Property(5, String.class, "remarks", false, "REMARKS");
        public final static Property RegistrationDate = new Property(6, String.class, "registrationDate", false, "REGISTRATION_DATE");
        public final static Property Time = new Property(7, String.class, "time", false, "TIME");
        public final static Property Like = new Property(8, Integer.class, "like", false, "LIKE");
    }


    public AddBankCardDao(DaoConfig config) {
        super(config);
    }
    
    public AddBankCardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADD_BANK_CARD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"BANK_ACCOUNT\" TEXT," + // 1: bankAccount
                "\"CARDHOLDER_NAME\" TEXT," + // 2: cardholderName
                "\"TEL_PHONE_NUM\" TEXT," + // 3: telPhoneNum
                "\"ISSUING_BANK\" TEXT," + // 4: issuingBank
                "\"REMARKS\" TEXT," + // 5: remarks
                "\"REGISTRATION_DATE\" TEXT," + // 6: registrationDate
                "\"TIME\" TEXT," + // 7: time
                "\"LIKE\" INTEGER);"); // 8: like
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADD_BANK_CARD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AddBankCard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bankAccount = entity.getBankAccount();
        if (bankAccount != null) {
            stmt.bindString(2, bankAccount);
        }
 
        String cardholderName = entity.getCardholderName();
        if (cardholderName != null) {
            stmt.bindString(3, cardholderName);
        }
 
        String telPhoneNum = entity.getTelPhoneNum();
        if (telPhoneNum != null) {
            stmt.bindString(4, telPhoneNum);
        }
 
        String issuingBank = entity.getIssuingBank();
        if (issuingBank != null) {
            stmt.bindString(5, issuingBank);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(6, remarks);
        }
 
        String registrationDate = entity.getRegistrationDate();
        if (registrationDate != null) {
            stmt.bindString(7, registrationDate);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
 
        Integer like = entity.getLike();
        if (like != null) {
            stmt.bindLong(9, like);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AddBankCard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bankAccount = entity.getBankAccount();
        if (bankAccount != null) {
            stmt.bindString(2, bankAccount);
        }
 
        String cardholderName = entity.getCardholderName();
        if (cardholderName != null) {
            stmt.bindString(3, cardholderName);
        }
 
        String telPhoneNum = entity.getTelPhoneNum();
        if (telPhoneNum != null) {
            stmt.bindString(4, telPhoneNum);
        }
 
        String issuingBank = entity.getIssuingBank();
        if (issuingBank != null) {
            stmt.bindString(5, issuingBank);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(6, remarks);
        }
 
        String registrationDate = entity.getRegistrationDate();
        if (registrationDate != null) {
            stmt.bindString(7, registrationDate);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
 
        Integer like = entity.getLike();
        if (like != null) {
            stmt.bindLong(9, like);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AddBankCard readEntity(Cursor cursor, int offset) {
        AddBankCard entity = new AddBankCard( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bankAccount
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cardholderName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // telPhoneNum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // issuingBank
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // remarks
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // registrationDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // time
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // like
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AddBankCard entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBankAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCardholderName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTelPhoneNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIssuingBank(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemarks(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRegistrationDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLike(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AddBankCard entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AddBankCard entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AddBankCard entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
