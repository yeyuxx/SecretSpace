package head.secretspace.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import head.secretspace.entity.AddIdentityCard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADD_IDENTITY_CARD".
*/
public class AddIdentityCardDao extends AbstractDao<AddIdentityCard, Long> {

    public static final String TABLENAME = "ADD_IDENTITY_CARD";

    /**
     * Properties of entity AddIdentityCard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Gender = new Property(2, String.class, "gender", false, "GENDER");
        public final static Property FamilyName = new Property(3, String.class, "familyName", false, "FAMILY_NAME");
        public final static Property IdCard = new Property(4, String.class, "idCard", false, "ID_CARD");
        public final static Property HomeAddress = new Property(5, String.class, "homeAddress", false, "HOME_ADDRESS");
        public final static Property Mechanism = new Property(6, String.class, "mechanism", false, "MECHANISM");
        public final static Property StartTime = new Property(7, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(8, String.class, "endTime", false, "END_TIME");
        public final static Property Time = new Property(9, String.class, "time", false, "TIME");
        public final static Property Like = new Property(10, Integer.class, "like", false, "LIKE");
    }


    public AddIdentityCardDao(DaoConfig config) {
        super(config);
    }
    
    public AddIdentityCardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADD_IDENTITY_CARD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"GENDER\" TEXT," + // 2: gender
                "\"FAMILY_NAME\" TEXT," + // 3: familyName
                "\"ID_CARD\" TEXT," + // 4: idCard
                "\"HOME_ADDRESS\" TEXT," + // 5: homeAddress
                "\"MECHANISM\" TEXT," + // 6: mechanism
                "\"START_TIME\" TEXT," + // 7: startTime
                "\"END_TIME\" TEXT," + // 8: endTime
                "\"TIME\" TEXT," + // 9: time
                "\"LIKE\" INTEGER);"); // 10: like
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADD_IDENTITY_CARD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AddIdentityCard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(3, gender);
        }
 
        String familyName = entity.getFamilyName();
        if (familyName != null) {
            stmt.bindString(4, familyName);
        }
 
        String idCard = entity.getIdCard();
        if (idCard != null) {
            stmt.bindString(5, idCard);
        }
 
        String homeAddress = entity.getHomeAddress();
        if (homeAddress != null) {
            stmt.bindString(6, homeAddress);
        }
 
        String mechanism = entity.getMechanism();
        if (mechanism != null) {
            stmt.bindString(7, mechanism);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(8, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(9, endTime);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(10, time);
        }
 
        Integer like = entity.getLike();
        if (like != null) {
            stmt.bindLong(11, like);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AddIdentityCard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(3, gender);
        }
 
        String familyName = entity.getFamilyName();
        if (familyName != null) {
            stmt.bindString(4, familyName);
        }
 
        String idCard = entity.getIdCard();
        if (idCard != null) {
            stmt.bindString(5, idCard);
        }
 
        String homeAddress = entity.getHomeAddress();
        if (homeAddress != null) {
            stmt.bindString(6, homeAddress);
        }
 
        String mechanism = entity.getMechanism();
        if (mechanism != null) {
            stmt.bindString(7, mechanism);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(8, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(9, endTime);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(10, time);
        }
 
        Integer like = entity.getLike();
        if (like != null) {
            stmt.bindLong(11, like);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AddIdentityCard readEntity(Cursor cursor, int offset) {
        AddIdentityCard entity = new AddIdentityCard( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gender
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // familyName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // idCard
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // homeAddress
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mechanism
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // startTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // endTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // time
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // like
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AddIdentityCard entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGender(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFamilyName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdCard(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHomeAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMechanism(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStartTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEndTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLike(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AddIdentityCard entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AddIdentityCard entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AddIdentityCard entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
